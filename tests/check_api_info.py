#!/usr/bin/env python3
"""
Script para verificar informa√ß√µes sobre a API key e consumo
"""
from dotenv import load_dotenv
from zai import ZaiClient
import json

# Carrega vari√°veis do .env
load_dotenv()

def check_api_key_info():
    """Verifica informa√ß√µes sobre a chave de API"""
    print("=" * 60)
    print("üîë INFORMA√á√ïES DA CHAVE DE API Z.AI")
    print("=" * 60)
    print()

    try:
        client = ZaiClient()
        print("‚úÖ Cliente ZAI criado com sucesso\n")
        print(f"üìç Base URL: {client.base_url}")
        print(f"üîê API Key: {client.api_key[:20]}...{client.api_key[-10:]}")
        print()

        # Faz uma chamada simples para verificar o uso
        print("=" * 60)
        print("üß™ TESTANDO CHAMADA SIMPLES (GLM-4.6)")
        print("=" * 60)
        print()

        try:
            response = client.chat.completions.create(
                model="glm-4.6",
                messages=[
                    {"role": "user", "content": "Hi"}
                ],
                max_tokens=10  # Limita tokens para economizar
            )

            print("‚úÖ Chamada bem-sucedida!\n")

            # Mostra informa√ß√µes de uso
            if hasattr(response, 'usage'):
                print("üìä USAGE (TOKENS CONSUMIDOS NESTA CHAMADA):")
                print(f"   ‚Ä¢ Prompt tokens: {response.usage.prompt_tokens}")
                print(f"   ‚Ä¢ Completion tokens: {response.usage.completion_tokens}")
                print(f"   ‚Ä¢ Total tokens: {response.usage.total_tokens}")
                print()

            # Mostra resposta
            if hasattr(response, 'choices') and len(response.choices) > 0:
                print("üí¨ Resposta do modelo:")
                print(f"   {response.choices[0].message.content}")
                print()

            # Mostra outros campos dispon√≠veis
            print("üìã CAMPOS DISPON√çVEIS NA RESPOSTA:")
            for key in dir(response):
                if not key.startswith('_'):
                    print(f"   ‚Ä¢ {key}")
            print()

            # Tenta verificar se h√° headers com informa√ß√µes de quota
            print("=" * 60)
            print("‚ÑπÔ∏è  INFORMA√á√ïES SOBRE LIMITES E QUOTAS")
            print("=" * 60)
            print()
            print("‚ö†Ô∏è  O SDK n√£o exp√µe diretamente informa√ß√µes de:")
            print("   ‚Ä¢ Saldo da conta")
            print("   ‚Ä¢ Limites de requisi√ß√µes")
            print("   ‚Ä¢ Quotas restantes")
            print("   ‚Ä¢ Lista de modelos dispon√≠veis no seu plano")
            print()
            print("üí° PARA VERIFICAR ESSAS INFORMA√á√ïES:")
            print("   1. Acesse: https://z.ai/manage-apikey/billing")
            print("   2. Verifique seu saldo e hist√≥rico de uso")
            print("   3. Veja os modelos dispon√≠veis no seu plano")
            print()

        except Exception as e:
            error_msg = str(e)
            print(f"‚ùå Erro na chamada: {error_msg}\n")

            if "1113" in error_msg or "Insufficient balance" in error_msg:
                print("üí° PROBLEMA: Saldo insuficiente")
                print("   ‚Ä¢ Seu saldo est√° em $0.00")
                print("   ‚Ä¢ Adicione cr√©ditos em: https://z.ai/manage-apikey/billing")
                print()
            elif "permission" in error_msg.lower():
                print("üí° PROBLEMA: Sem permiss√£o para este modelo")
                print("   ‚Ä¢ Verifique os modelos dispon√≠veis no seu plano")
                print()

        print("=" * 60)
        print("üìö MODELOS SUPORTADOS PELO SDK")
        print("=" * 60)
        print()
        print("ü§ñ LANGUAGE MODELS:")
        print("   ‚Ä¢ GLM-4.6")
        print("   ‚Ä¢ GLM-4.5")
        print("   ‚Ä¢ GLM-4-Plus")
        print("   ‚Ä¢ GLM-4-Air (mais barato)")
        print("   ‚Ä¢ GLM-4.5V (visual)")
        print()
        print("üé® IMAGE GENERATION:")
        print("   ‚Ä¢ CogView-3")
        print("   ‚Ä¢ CogView-4")
        print()
        print("üé• VIDEO GENERATION:")
        print("   ‚Ä¢ CogVideoX-3 ($0.20/v√≠deo)")
        print("   ‚Ä¢ CogVideoX-2")
        print("   ‚Ä¢ viduq1-text, viduq1-image, viduq1-start-end")
        print("   ‚Ä¢ vidu2-image, vidu2-start-end, vidu2-reference")
        print()
        print("=" * 60)
        print("üí∞ IMPORTANTE SOBRE BILLING")
        print("=" * 60)
        print()
        print("Seu saldo atual: $0.00")
        print()
        print("Para usar os modelos, voc√™ precisa:")
        print("1. Acessar: https://z.ai/manage-apikey/billing")
        print("2. Adicionar um m√©todo de pagamento")
        print("3. Recarregar cr√©ditos")
        print()
        print("üí° Plano GLM Coding: $3/m√™s (acesso ao GLM-4.6)")
        print()

    except Exception as e:
        print(f"\n‚ùå ERRO: {e}\n")
        print("Verifique se:")
        print("  ‚Ä¢ O arquivo .env existe e cont√©m ZAI_API_KEY")
        print("  ‚Ä¢ A chave de API est√° correta")
        print("  ‚Ä¢ Voc√™ tem conex√£o com a internet")

if __name__ == "__main__":
    check_api_key_info()
